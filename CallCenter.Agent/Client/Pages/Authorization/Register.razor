@page "/register"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider


<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerRequest">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>User Id</label>
                <InputText @bind-Value="registerRequest.UserName" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.UserName)" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="registerRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>

            <div class="form-group">
                <label>Password Confirmation</label>
                <InputText type="password" id="inputPasswordConfirm" class="form-control" @bind-Value="@registerRequest.PasswordConfirm" />
                <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" />
            </div>

            <label class="form-check-label">Select Roles</label>
            <div class="form-check m-3">
                @foreach (var role in UserRoleList())
                {
                    <input type="checkbox" class="form-check-input" @onchange="eventArgs => { CheckboxClicked(role, eventArgs.Value); }" />@role<br />
                }
            </div>

            <button class="btn btn-primary">
                Register
            </button>

            <label class="text-danger">@error</label>
            <NavLink href="login">
                <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
            </NavLink>
        </EditForm>
    </div>
</div>

@functions{
    RegisterRequest registerRequest { get; set; } = new RegisterRequest();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            List<UserRole> userRole = new List<UserRole>();
            foreach (var role in UserRoles)
            {
                userRole.Add(new UserRole { UserId = registerRequest.UserName, Role = role });
            }
            registerRequest.Roles = userRole;

            await authStateProvider.Register(registerRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public List<string> UserRoles { get; set; } = new List<string>();
    void CheckboxClicked(string roleId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!UserRoles.Contains(roleId))
            {
                UserRoles.Add(roleId);
            }
        }
        else
        {
            if (UserRoles.Contains(roleId))
            {
                UserRoles.Remove(roleId);
            }
        }
    }

    public List<String> UserRoleList()
    {
        List<String> c = new List<String>();
        c.Add("Admin");
        c.Add("TeamLead");
        c.Add("SystemAdministrator");
        c.Add("OperationEngineer");
        return c;
    }
}