@page "/login"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="loginRequest.UserName" class="form-control" />
                <ValidationMessage For="@(() => loginRequest.UserName)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <div class="form-check m-3">
                <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginRequest.RememberMe" />
                <label class="form-check-label" for="inputRememberMe">Remember Me</label>
            </div>

            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>}
                Login
            </button>

            <label class="text-danger">@error</label>

            <NavLink href="register" class="btn btn-link">Register User</NavLink>
        </EditForm>
    </div>
</div>
@code{ LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    private bool loading;

    async Task OnSubmit()
    {
        error = null;
        loading = true;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
        }
    } }